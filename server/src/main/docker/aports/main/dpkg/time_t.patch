musl 1.2 switched from 32-bit time_t to 64-bit time_t on 32-bit arches.
Unfourtunatly, the dpkg code assumes that time_t is a long int (or long
unsigned int in some place). As a dirty workaround use PRId64 instead.

See also: http://musl.libc.org/time64.html

diff -upr dpkg-1.20.5.orig/dpkg-deb/build.c dpkg-1.20.5/dpkg-deb/build.c
--- dpkg-1.20.5.orig/dpkg-deb/build.c	2020-06-27 20:24:28.000000000 +0200
+++ dpkg-1.20.5/dpkg-deb/build.c	2020-08-27 23:00:05.501645000 +0200
@@ -38,6 +38,7 @@
 #include <stdint.h>
 #include <stdlib.h>
 #include <stdio.h>
+#include <inttypes.h>
 
 #include <dpkg/i18n.h>
 #include <dpkg/c-ctype.h>
@@ -457,7 +458,7 @@ tarball_pack(const char *dir, filenames_
     if (chdir(dir))
       ohshite(_("failed to chdir to '%.255s'"), dir);
 
-    snprintf(mtime, sizeof(mtime), "@%ld", options->timestamp);
+    snprintf(mtime, sizeof(mtime), "@%" PRId64, options->timestamp);
 
     command_init(&cmd, TAR, "tar -cf");
     command_add_args(&cmd, "tar", "-cf", "-", "--format=gnu",
diff -upr dpkg-1.20.5.orig/lib/dpkg/perf.h dpkg-1.20.5/lib/dpkg/perf.h
--- dpkg-1.20.5.orig/lib/dpkg/perf.h	2019-11-27 14:39:09.000000000 +0100
+++ dpkg-1.20.5/lib/dpkg/perf.h	2020-08-27 23:00:58.851649314 +0200
@@ -24,6 +24,7 @@
 
 #include <config.h>
 #include <compat.h>
+#include <inttypes.h>
 
 #include <time.h>
 #include <stdio.h>
@@ -50,7 +51,7 @@ perf_ts_mark_print(const char *str)
 
 	clock_gettime(CLOCK_MONOTONIC, &ts);
 
-	printf("%lu.%.9lu: %s\n", ts.tv_sec, ts.tv_nsec, str);
+	printf("%" PRId64 ".%.9lu: %s\n", ts.tv_sec, ts.tv_nsec, str);
 }
 
 static void
@@ -60,7 +61,7 @@ perf_ts_slot_print(struct perf_slot *ps,
 
 	perf_ts_sub(&ps->t_end, &ps->t_ini, &t_res);
 
-	printf("%lu.%.9lu: %s (%lu.%.9lu sec)\n",
+	printf("%" PRId64 ".%.9lu: %s (%lu.%.9lu sec)\n",
 	       ps->t_end.tv_sec, ps->t_end.tv_nsec,
 	       str, t_res.tv_sec, t_res.tv_nsec);
 }
diff -upr dpkg-1.20.5.orig/lib/dpkg/pkg-format.c dpkg-1.20.5/lib/dpkg/pkg-format.c
--- dpkg-1.20.5.orig/lib/dpkg/pkg-format.c	2020-06-02 04:51:37.000000000 +0200
+++ dpkg-1.20.5/lib/dpkg/pkg-format.c	2020-08-27 23:01:24.044984684 +0200
@@ -31,6 +31,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <unistd.h>
+#include <inttypes.h>
 
 #include <dpkg/i18n.h>
 #include <dpkg/error.h>
@@ -299,7 +300,7 @@ virt_fsys_last_modified(struct varbuf *v
 		        pkgbin_name_const(pkg, pkgbin, pnaw_nonambig));
 	}
 
-	varbuf_printf(vb, "%ld", st.st_mtime);
+	varbuf_printf(vb, "%" PRId64, st.st_mtime);
 }
 
 /*
diff -upr dpkg-1.20.5.orig/lib/dpkg/t/c-tarextract.c dpkg-1.20.5/lib/dpkg/t/c-tarextract.c
--- dpkg-1.20.5.orig/lib/dpkg/t/c-tarextract.c	2020-06-02 04:51:37.000000000 +0200
+++ dpkg-1.20.5/lib/dpkg/t/c-tarextract.c	2020-08-27 23:01:53.108320365 +0200
@@ -31,6 +31,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <unistd.h>
+#include <inttypes.h>
 
 #include <dpkg/ehandle.h>
 #include <dpkg/fdio.h>
@@ -65,7 +66,7 @@ tar_object_skip(struct tar_archive *tar,
 static int
 tar_object(struct tar_archive *tar, struct tar_entry *te)
 {
-	printf("%s mode=%o time=%ld.%.9d uid=%d gid=%d", te->name,
+	printf("%s mode=%o time=%" PRId64 ".%.9d uid=%d gid=%d", te->name,
 	       te->stat.mode, te->mtime, 0, te->stat.uid, te->stat.gid);
 	if (te->stat.uname)
 		printf(" uname=%s", te->stat.uname);
