From e1ac00f597fa3f10dd1fe0e45bd9694e961ac248 Mon Sep 17 00:00:00 2001
From: Natanael Copa <ncopa@alpinelinux.org>
Date: Mon, 27 Jul 2020 10:59:18 +0000
Subject: [PATCH] Revert "ash: jobs: Only clear gotsigchld when waiting for
 everything"

This reverts commit 47eb979404735b9528538968cb5eaac7355a0c5a.
---
 shell/ash.c | 122 ++++++++++++++++++++++++++++------------------------
 1 file changed, 66 insertions(+), 56 deletions(-)

diff --git a/shell/ash.c b/shell/ash.c
index ecb9b132b..2214557a8 100644
--- a/shell/ash.c
+++ b/shell/ash.c
@@ -3795,6 +3795,8 @@ static struct job *jobtab; //5
 static unsigned njobs; //4
 /* current job */
 static struct job *curjob; //lots
+/* number of presumed living untracked jobs */
+static int jobless; //4
 
 #if 0
 /* Bash has a feature: it restores termios after a successful wait for
@@ -4325,7 +4327,7 @@ wait_block_or_sig(int *status)
 #endif
 
 static int
-waitone(int block, struct job *job)
+dowait(int block, struct job *job)
 {
 	int pid;
 	int status;
@@ -4426,6 +4428,10 @@ waitone(int block, struct job *job)
 		goto out;
 	}
 	/* The process wasn't found in job list */
+#if JOBS
+	if (!WIFSTOPPED(status))
+		jobless--;
+#endif
  out:
 	INT_ON;
 
@@ -4450,20 +4456,6 @@ waitone(int block, struct job *job)
 	return pid;
 }
 
-static int
-dowait(int block, struct job *jp)
-{
-	int pid = block == DOWAIT_NONBLOCK ? got_sigchld : 1;
-
-	while (jp ? jp->state == JOBRUNNING : pid > 0) {
-		if (!jp)
-			got_sigchld = 0;
-		pid = waitone(block, jp);
-	}
-
-	return pid;
-}
-
 #if JOBS
 static void
 showjob(struct job *jp, int mode)
@@ -4552,7 +4544,8 @@ showjobs(int mode)
 	TRACE(("showjobs(0x%x) called\n", mode));
 
 	/* Handle all finished jobs */
-	dowait(DOWAIT_NONBLOCK, NULL);
+	while (dowait(DOWAIT_NONBLOCK, NULL) > 0)
+		continue;
 
 	for (jp = curjob; jp; jp = jp->prev_job) {
 		if (!(mode & SHOW_CHANGED) || jp->changed) {
@@ -4669,10 +4662,10 @@ waitcmd(int argc UNUSED_PARAM, char **argv)
 #else
 			dowait(DOWAIT_BLOCK_OR_SIG, NULL);
 #endif
-			/* if child sends us a signal *and immediately exits*,
-			 * dowait() returns pid > 0. Check this case,
-			 * not "if (dowait() < 0)"!
-			 */
+	/* if child sends us a signal *and immediately exits*,
+	 * dowait() returns pid > 0. Check this case,
+	 * not "if (dowait() < 0)"!
+	 */
 			if (pending_sig)
 				goto sigout;
 #if BASH_WAIT_N
@@ -4708,9 +4701,11 @@ waitcmd(int argc UNUSED_PARAM, char **argv)
 			job = getjob(*argv, 0);
 		}
 		/* loop until process terminated or stopped */
-		dowait(DOWAIT_BLOCK_OR_SIG, NULL);
-		if (pending_sig)
-			goto sigout;
+		while (job->state == JOBRUNNING) {
+			dowait(DOWAIT_BLOCK_OR_SIG, NULL);
+			if (pending_sig)
+				goto sigout;
+		}
 		job->waited = 1;
 		retval = getstatus(job);
  repeat: ;
@@ -5262,6 +5257,7 @@ forkchild(struct job *jp, union node *n, int mode)
 #endif
 	for (jp = curjob; jp; jp = jp->prev_job)
 		freejob(jp);
+	jobless = 0;
 }
 
 /* Called after fork(), in parent */
@@ -5272,8 +5268,13 @@ static void
 forkparent(struct job *jp, union node *n, int mode, pid_t pid)
 {
 	TRACE(("In parent shell: child = %d\n", pid));
-	if (!jp) /* jp is NULL when called by openhere() for heredoc support */
+	if (!jp) {
+		/* jp is NULL when called by openhere() for heredoc support */
+		while (jobless && dowait(DOWAIT_NONBLOCK, NULL) > 0)
+			continue;
+		jobless++;
 		return;
+	}
 #if JOBS
 	if (mode != FORK_NOJOB && jp->jobctl) {
 		int pgrp;
@@ -5352,39 +5353,48 @@ waitforjob(struct job *jp)
 
 	TRACE(("waitforjob(%%%d) called\n", jp ? jobno(jp) : 0));
 
-	/* In non-interactive shells, we _can_ get
-	 * a keyboard signal here and be EINTRed, but we just loop
-	 * inside dowait(), waiting for command to complete.
-	 *
-	 * man bash:
-	 * "If bash is waiting for a command to complete and receives
-	 * a signal for which a trap has been set, the trap
-	 * will not be executed until the command completes."
-	 *
-	 * Reality is that even if trap is not set, bash
-	 * will not act on the signal until command completes.
-	 * Try this. sleep5intoff.c:
-	 * #include <signal.h>
-	 * #include <unistd.h>
-	 * int main() {
-	 *         sigset_t set;
-	 *         sigemptyset(&set);
-	 *         sigaddset(&set, SIGINT);
-	 *         sigaddset(&set, SIGQUIT);
-	 *         sigprocmask(SIG_BLOCK, &set, NULL);
-	 *         sleep(5);
-	 *         return 0;
-	 * }
-	 * $ bash -c './sleep5intoff; echo hi'
-	 * ^C^C^C^C <--- pressing ^C once a second
-	 * $ _
-	 * $ bash -c './sleep5intoff; echo hi'
-	 * ^\^\^\^\hi <--- pressing ^\ (SIGQUIT)
-	 * $ _
-	 */
-	dowait(jp ? DOWAIT_BLOCK : DOWAIT_NONBLOCK, jp);
-	if (!jp)
+	if (!jp) {
+		int pid = got_sigchld;
+
+		while (pid > 0)
+			pid = dowait(DOWAIT_NONBLOCK, NULL);
+
 		return exitstatus;
+	}
+
+	while (jp->state == JOBRUNNING) {
+		/* In non-interactive shells, we _can_ get
+		 * a keyboard signal here and be EINTRed,
+		 * but we just loop back, waiting for command to complete.
+		 *
+		 * man bash:
+		 * "If bash is waiting for a command to complete and receives
+		 * a signal for which a trap has been set, the trap
+		 * will not be executed until the command completes."
+		 *
+		 * Reality is that even if trap is not set, bash
+		 * will not act on the signal until command completes.
+		 * Try this. sleep5intoff.c:
+		 * #include <signal.h>
+		 * #include <unistd.h>
+		 * int main() {
+		 *         sigset_t set;
+		 *         sigemptyset(&set);
+		 *         sigaddset(&set, SIGINT);
+		 *         sigaddset(&set, SIGQUIT);
+		 *         sigprocmask(SIG_BLOCK, &set, NULL);
+		 *         sleep(5);
+		 *         return 0;
+		 * }
+		 * $ bash -c './sleep5intoff; echo hi'
+		 * ^C^C^C^C <--- pressing ^C once a second
+		 * $ _
+		 * $ bash -c './sleep5intoff; echo hi'
+		 * ^\^\^\^\hi <--- pressing ^\ (SIGQUIT)
+		 * $ _
+		 */
+		dowait(DOWAIT_BLOCK, jp);
+	}
 
 	st = getstatus(jp);
 #if JOBS
-- 
2.27.0

